name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Format code
      run: |
        gofmt -s -w .
        git diff --exit-code

    - name: Vet code
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.21]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Build binary
      run: |
        mkdir -p bin
        go build -ldflags "-X main.version=${{ github.sha }}-ci" -o bin/gemini-agentic${{ matrix.os == 'windows-latest' && '.exe' || '' }} cmd/agentic/main.go

    - name: Test binary
      run: |
        ./bin/gemini-agentic${{ matrix.os == 'windows-latest' && '.exe' || '' }} --help

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gemini-agentic-${{ matrix.os }}
        path: bin/gemini-agentic${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/gemini-agentic
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Build release binaries
      run: |
        mkdir -p dist
        
        # Linux amd64
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ github.event.release.tag_name }}" -o dist/gemini-agentic-linux-amd64 cmd/agentic/main.go
        
        # Linux arm64
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ github.event.release.tag_name }}" -o dist/gemini-agentic-linux-arm64 cmd/agentic/main.go
        
        # macOS amd64
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ github.event.release.tag_name }}" -o dist/gemini-agentic-darwin-amd64 cmd/agentic/main.go
        
        # macOS arm64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ github.event.release.tag_name }}" -o dist/gemini-agentic-darwin-arm64 cmd/agentic/main.go
        
        # Windows amd64
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ github.event.release.tag_name }}" -o dist/gemini-agentic-windows-amd64.exe cmd/agentic/main.go

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/gemini-agentic-*
          dist/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}